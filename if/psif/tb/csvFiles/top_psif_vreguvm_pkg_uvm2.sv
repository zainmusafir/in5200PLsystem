//----------------------------------------------------------------------
//   THIS IS AUTOMATICALLY GENERATED CODE
//   Generated by Mentor Graphics' Register Assistant UVM V2020.1 (Build 1)
//   UVM Register Kit version 1.1
//----------------------------------------------------------------------
// Project         : csvFiles
// Unit            : top_psif_vreguvm_pkg_uvm2
// File            : top_psif_vreguvm_pkg_uvm2.sv
//----------------------------------------------------------------------
// Created by      : roarsk
// Creation Date   : 5/14/20 12:15 PM
//----------------------------------------------------------------------
// Title           : csvFiles
//
// Description     : 
//
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// top_psif_vreguvm_pkg_uvm2
//----------------------------------------------------------------------
package top_psif_vreguvm_pkg_uvm2;

   import uvm_pkg::*;

   `include "uvm_macros.svh"

   /* DEFINE REGISTER CLASSES */



   //--------------------------------------------------------------------
   // Class: DTISPIRXFIFO_mem
   // 
   //--------------------------------------------------------------------

   class DTISPIRXFIFO_mem extends uvm_mem;
      `uvm_object_utils(DTISPIRXFIFO_mem)



      // Function: new
      // 
      function new(string name = "DTISPIRXFIFO_mem");
         super.new(name, 'h800, 32, "RO", UVM_NO_COVERAGE);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: DTISPITXFIFO_mem
   // 
   //--------------------------------------------------------------------

   class DTISPITXFIFO_mem extends uvm_mem;
      `uvm_object_utils(DTISPITXFIFO_mem)



      // Function: new
      // 
      function new(string name = "DTISPITXFIFO_mem");
         super.new(name, 'h800, 32, "RW", UVM_NO_COVERAGE);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: DTI_SPI_ACTIVE_reg
   // 
   //--------------------------------------------------------------------

   class DTI_SPI_ACTIVE_reg extends uvm_reg;
      `uvm_object_utils(DTI_SPI_ACTIVE_reg)

      uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[0];
      endgroup



      // Function: new
      // 
      function new(string name = "DTI_SPI_ACTIVE_reg");
         super.new(name, 1, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: DTI_SPI_FIFO_TX_WRITE_ENABLE_reg
   // 
   //--------------------------------------------------------------------

   class DTI_SPI_FIFO_TX_WRITE_ENABLE_reg extends uvm_reg;
      `uvm_object_utils(DTI_SPI_FIFO_TX_WRITE_ENABLE_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[0];
      endgroup



      // Function: new
      // 
      function new(string name = "DTI_SPI_FIFO_TX_WRITE_ENABLE_reg");
         super.new(name, 1, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 1, 0, "RW", 0, 1'b1, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: DTI_SPI_LOOP_ENA_reg
   // 
   //--------------------------------------------------------------------

   class DTI_SPI_LOOP_ENA_reg extends uvm_reg;
      `uvm_object_utils(DTI_SPI_LOOP_ENA_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[0];
      endgroup



      // Function: new
      // 
      function new(string name = "DTI_SPI_LOOP_ENA_reg");
         super.new(name, 1, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: DTI_SPI_PS_ACCESS_ENA_reg
   // 
   //--------------------------------------------------------------------

   class DTI_SPI_PS_ACCESS_ENA_reg extends uvm_reg;
      `uvm_object_utils(DTI_SPI_PS_ACCESS_ENA_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[0];
      endgroup



      // Function: new
      // 
      function new(string name = "DTI_SPI_PS_ACCESS_ENA_reg");
         super.new(name, 1, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: DTI_SPI_RX_FIFO_COUNT_reg
   // 
   //--------------------------------------------------------------------

   class DTI_SPI_RX_FIFO_COUNT_reg extends uvm_reg;
      `uvm_object_utils(DTI_SPI_RX_FIFO_COUNT_reg)

      uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[8:0];
      endgroup



      // Function: new
      // 
      function new(string name = "DTI_SPI_RX_FIFO_COUNT_reg");
         super.new(name, 9, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 9, 0, "RO", 0, 9'b000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: DTI_SPI_TX_FIFO_COUNT_reg
   // 
   //--------------------------------------------------------------------

   class DTI_SPI_TX_FIFO_COUNT_reg extends uvm_reg;
      `uvm_object_utils(DTI_SPI_TX_FIFO_COUNT_reg)

      uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[8:0];
      endgroup



      // Function: new
      // 
      function new(string name = "DTI_SPI_TX_FIFO_COUNT_reg");
         super.new(name, 9, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 9, 0, "RO", 0, 9'b000000000, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: ODI_BYTE0_reg
   // 
   //--------------------------------------------------------------------

   class ODI_BYTE0_reg extends uvm_reg;
      `uvm_object_utils(ODI_BYTE0_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[7:0];
      endgroup



      // Function: new
      // 
      function new(string name = "ODI_BYTE0_reg");
         super.new(name, 8, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: ODI_BYTE1_reg
   // 
   //--------------------------------------------------------------------

   class ODI_BYTE1_reg extends uvm_reg;
      `uvm_object_utils(ODI_BYTE1_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[7:0];
      endgroup



      // Function: new
      // 
      function new(string name = "ODI_BYTE1_reg");
         super.new(name, 8, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: ODI_BYTE2_reg
   // 
   //--------------------------------------------------------------------

   class ODI_BYTE2_reg extends uvm_reg;
      `uvm_object_utils(ODI_BYTE2_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[7:0];
      endgroup



      // Function: new
      // 
      function new(string name = "ODI_BYTE2_reg");
         super.new(name, 8, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: ODI_BYTE3_reg
   // 
   //--------------------------------------------------------------------

   class ODI_BYTE3_reg extends uvm_reg;
      `uvm_object_utils(ODI_BYTE3_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[7:0];
      endgroup



      // Function: new
      // 
      function new(string name = "ODI_BYTE3_reg");
         super.new(name, 8, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: ODI_HALFWORD0_reg
   // 
   //--------------------------------------------------------------------

   class ODI_HALFWORD0_reg extends uvm_reg;
      `uvm_object_utils(ODI_HALFWORD0_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[15:0];
      endgroup



      // Function: new
      // 
      function new(string name = "ODI_HALFWORD0_reg");
         super.new(name, 16, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 16, 0, "RW", 0, 16'h0000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: ODI_HALFWORD1_reg
   // 
   //--------------------------------------------------------------------

   class ODI_HALFWORD1_reg extends uvm_reg;
      `uvm_object_utils(ODI_HALFWORD1_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[15:0];
      endgroup



      // Function: new
      // 
      function new(string name = "ODI_HALFWORD1_reg");
         super.new(name, 16, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 16, 0, "RW", 0, 16'h0000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: ODI_OLEDBYTE11_8_reg
   // 
   //--------------------------------------------------------------------

   class ODI_OLEDBYTE11_8_reg extends uvm_reg;
      `uvm_object_utils(ODI_OLEDBYTE11_8_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[31:0];
      endgroup



      // Function: new
      // 
      function new(string name = "ODI_OLEDBYTE11_8_reg");
         super.new(name, 32, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 32, 0, "RW", 0, 32'h20202120, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: ODI_OLEDBYTE15_12_reg
   // 
   //--------------------------------------------------------------------

   class ODI_OLEDBYTE15_12_reg extends uvm_reg;
      `uvm_object_utils(ODI_OLEDBYTE15_12_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[31:0];
      endgroup



      // Function: new
      // 
      function new(string name = "ODI_OLEDBYTE15_12_reg");
         super.new(name, 32, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 32, 0, "RW", 0, 32'h20202021, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: ODI_OLEDBYTE3_0_reg
   // 
   //--------------------------------------------------------------------

   class ODI_OLEDBYTE3_0_reg extends uvm_reg;
      `uvm_object_utils(ODI_OLEDBYTE3_0_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[31:0];
      endgroup



      // Function: new
      // 
      function new(string name = "ODI_OLEDBYTE3_0_reg");
         super.new(name, 32, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 32, 0, "RW", 0, 32'h21202020, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: ODI_OLEDBYTE7_4_reg
   // 
   //--------------------------------------------------------------------

   class ODI_OLEDBYTE7_4_reg extends uvm_reg;
      `uvm_object_utils(ODI_OLEDBYTE7_4_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[31:0];
      endgroup



      // Function: new
      // 
      function new(string name = "ODI_OLEDBYTE7_4_reg");
         super.new(name, 32, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 32, 0, "RW", 0, 32'h20212020, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: ODI_PS_ACCESS_ENA_TEST_reg
   // 
   //--------------------------------------------------------------------

   class ODI_PS_ACCESS_ENA_TEST_reg extends uvm_reg;
      `uvm_object_utils(ODI_PS_ACCESS_ENA_TEST_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[0];
      endgroup



      // Function: new
      // 
      function new(string name = "ODI_PS_ACCESS_ENA_TEST_reg");
         super.new(name, 1, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: ODI_PS_ACCESS_ENA_reg
   // 
   //--------------------------------------------------------------------

   class ODI_PS_ACCESS_ENA_reg extends uvm_reg;
      `uvm_object_utils(ODI_PS_ACCESS_ENA_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[0];
      endgroup



      // Function: new
      // 
      function new(string name = "ODI_PS_ACCESS_ENA_reg");
         super.new(name, 1, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: ODI_WMRBYTE0_reg
   // 
   //--------------------------------------------------------------------

   class ODI_WMRBYTE0_reg extends uvm_reg;
      `uvm_object_utils(ODI_WMRBYTE0_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[7:0];
      endgroup



      // Function: new
      // 
      function new(string name = "ODI_WMRBYTE0_reg");
         super.new(name, 8, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: ODI_WMRBYTE1_reg
   // 
   //--------------------------------------------------------------------

   class ODI_WMRBYTE1_reg extends uvm_reg;
      `uvm_object_utils(ODI_WMRBYTE1_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[7:0];
      endgroup



      // Function: new
      // 
      function new(string name = "ODI_WMRBYTE1_reg");
         super.new(name, 8, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: ODI_WMRBYTE2_reg
   // 
   //--------------------------------------------------------------------

   class ODI_WMRBYTE2_reg extends uvm_reg;
      `uvm_object_utils(ODI_WMRBYTE2_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[7:0];
      endgroup



      // Function: new
      // 
      function new(string name = "ODI_WMRBYTE2_reg");
         super.new(name, 8, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: ODI_WMRBYTE3_reg
   // 
   //--------------------------------------------------------------------

   class ODI_WMRBYTE3_reg extends uvm_reg;
      `uvm_object_utils(ODI_WMRBYTE3_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[7:0];
      endgroup



      // Function: new
      // 
      function new(string name = "ODI_WMRBYTE3_reg");
         super.new(name, 8, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 8, 0, "RW", 0, 8'h00, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: ODI_WMRHALFWORD0_reg
   // 
   //--------------------------------------------------------------------

   class ODI_WMRHALFWORD0_reg extends uvm_reg;
      `uvm_object_utils(ODI_WMRHALFWORD0_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[15:0];
      endgroup



      // Function: new
      // 
      function new(string name = "ODI_WMRHALFWORD0_reg");
         super.new(name, 16, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 16, 0, "RW", 0, 16'h0000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: ODI_WMRHALFWORD1_reg
   // 
   //--------------------------------------------------------------------

   class ODI_WMRHALFWORD1_reg extends uvm_reg;
      `uvm_object_utils(ODI_WMRHALFWORD1_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[15:0];
      endgroup



      // Function: new
      // 
      function new(string name = "ODI_WMRHALFWORD1_reg");
         super.new(name, 16, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 16, 0, "RW", 0, 16'h0000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: ODI_WORD0_reg
   // 
   //--------------------------------------------------------------------

   class ODI_WORD0_reg extends uvm_reg;
      `uvm_object_utils(ODI_WORD0_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[31:0];
      endgroup



      // Function: new
      // 
      function new(string name = "ODI_WORD0_reg");
         super.new(name, 32, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: ODI_WORD1_reg
   // 
   //--------------------------------------------------------------------

   class ODI_WORD1_reg extends uvm_reg;
      `uvm_object_utils(ODI_WORD1_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[31:0];
      endgroup



      // Function: new
      // 
      function new(string name = "ODI_WORD1_reg");
         super.new(name, 32, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: SCU_ALARM_ACK_BUTTON_reg
   // 
   //--------------------------------------------------------------------

   class SCU_ALARM_ACK_BUTTON_reg extends uvm_reg;
      `uvm_object_utils(SCU_ALARM_ACK_BUTTON_reg)

      uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[0];
      endgroup



      // Function: new
      // 
      function new(string name = "SCU_ALARM_ACK_BUTTON_reg");
         super.new(name, 1, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: SCU_DTI_READ_ENA_reg
   // 
   //--------------------------------------------------------------------

   class SCU_DTI_READ_ENA_reg extends uvm_reg;
      `uvm_object_utils(SCU_DTI_READ_ENA_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[0];
      endgroup



      // Function: new
      // 
      function new(string name = "SCU_DTI_READ_ENA_reg");
         super.new(name, 1, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: SCU_FSM_RST_reg
   // 
   //--------------------------------------------------------------------

   class SCU_FSM_RST_reg extends uvm_reg;
      `uvm_object_utils(SCU_FSM_RST_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[0];
      endgroup



      // Function: new
      // 
      function new(string name = "SCU_FSM_RST_reg");
         super.new(name, 1, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: SCU_OLEDBYTE11_8_reg
   // 
   //--------------------------------------------------------------------

   class SCU_OLEDBYTE11_8_reg extends uvm_reg;
      `uvm_object_utils(SCU_OLEDBYTE11_8_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[31:0];
      endgroup



      // Function: new
      // 
      function new(string name = "SCU_OLEDBYTE11_8_reg");
         super.new(name, 32, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: SCU_OLEDBYTE15_12_reg
   // 
   //--------------------------------------------------------------------

   class SCU_OLEDBYTE15_12_reg extends uvm_reg;
      `uvm_object_utils(SCU_OLEDBYTE15_12_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[31:0];
      endgroup



      // Function: new
      // 
      function new(string name = "SCU_OLEDBYTE15_12_reg");
         super.new(name, 32, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: SCU_OLEDBYTE3_0_reg
   // 
   //--------------------------------------------------------------------

   class SCU_OLEDBYTE3_0_reg extends uvm_reg;
      `uvm_object_utils(SCU_OLEDBYTE3_0_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[31:0];
      endgroup



      // Function: new
      // 
      function new(string name = "SCU_OLEDBYTE3_0_reg");
         super.new(name, 32, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: SCU_OLEDBYTE7_4_reg
   // 
   //--------------------------------------------------------------------

   class SCU_OLEDBYTE7_4_reg extends uvm_reg;
      `uvm_object_utils(SCU_OLEDBYTE7_4_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[31:0];
      endgroup



      // Function: new
      // 
      function new(string name = "SCU_OLEDBYTE7_4_reg");
         super.new(name, 32, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 32, 0, "RW", 0, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: SCU_ZU_DATA_ENA_reg
   // 
   //--------------------------------------------------------------------

   class SCU_ZU_DATA_ENA_reg extends uvm_reg;
      `uvm_object_utils(SCU_ZU_DATA_ENA_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[0];
      endgroup



      // Function: new
      // 
      function new(string name = "SCU_ZU_DATA_ENA_reg");
         super.new(name, 1, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: ZUKEY_mem
   // 
   //--------------------------------------------------------------------

   class ZUKEY_mem extends uvm_mem;
      `uvm_object_utils(ZUKEY_mem)



      // Function: new
      // 
      function new(string name = "ZUKEY_mem");
         super.new(name, 'h200, 32, "RW", UVM_NO_COVERAGE);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: ZUPACKET_mem
   // 
   //--------------------------------------------------------------------

   class ZUPACKET_mem extends uvm_mem;
      `uvm_object_utils(ZUPACKET_mem)



      // Function: new
      // 
      function new(string name = "ZUPACKET_mem");
         super.new(name, 'h200, 32, "RW", UVM_NO_COVERAGE);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: ZU_DECRYPTION_BYPASS_reg
   // 
   // Data  packet  NOT  decrypted;  just  passed  through
   //--------------------------------------------------------------------

   class ZU_DECRYPTION_BYPASS_reg extends uvm_reg;
      `uvm_object_utils(ZU_DECRYPTION_BYPASS_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[0];
      endgroup



      // Function: new
      // 
      function new(string name = "ZU_DECRYPTION_BYPASS_reg");
         super.new(name, 1, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 1, 0, "RW", 0, 1'b1, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: ZU_DONE_DECRYPTION_reg
   // 
   //--------------------------------------------------------------------

   class ZU_DONE_DECRYPTION_reg extends uvm_reg;
      `uvm_object_utils(ZU_DONE_DECRYPTION_reg)

      uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[0];
      endgroup



      // Function: new
      // 
      function new(string name = "ZU_DONE_DECRYPTION_reg");
         super.new(name, 1, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 1, 0, "RO", 0, 1'b1, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: ZU_FSM_RST_reg
   // 
   // Reset  ZU  FSM  that  controls  decryption  HLS  IP.
   //--------------------------------------------------------------------

   class ZU_FSM_RST_reg extends uvm_reg;
      `uvm_object_utils(ZU_FSM_RST_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[0];
      endgroup



      // Function: new
      // 
      function new(string name = "ZU_FSM_RST_reg");
         super.new(name, 1, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: ZU_START_DECRYPTION_reg
   // 
   // Start  decryption
   //--------------------------------------------------------------------

   class ZU_START_DECRYPTION_reg extends uvm_reg;
      `uvm_object_utils(ZU_START_DECRYPTION_reg)

      rand uvm_reg_field data; 


      // Function: coverage
      // 
      covergroup cg_vals;
         data	 : coverpoint data.value[0];
      endgroup



      // Function: new
      // 
      function new(string name = "ZU_START_DECRYPTION_reg");
         super.new(name, 1, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass




   /* BLOCKS */



   //--------------------------------------------------------------------
   // Class: ODI_module_ODI_map_coverage
   // 
   // Coverage for the 'ODI_map' in 'ODI_module'
   //--------------------------------------------------------------------

   class ODI_module_ODI_map_coverage extends uvm_object;
      `uvm_object_utils(ODI_module_ODI_map_coverage)

      covergroup ra_cov(string name) with function sample(uvm_reg_addr_t addr, bit is_read);

         option.per_instance = 1;
         option.name = name; 

         ADDR: coverpoint addr {
            bins ODI_OLEDBYTE3_0 = {'h60};
            bins ODI_OLEDBYTE7_4 = {'h64};
            bins ODI_OLEDBYTE11_8 = {'h68};
            bins ODI_OLEDBYTE15_12 = {'h6c};
            bins ODI_BYTE0 = {'h70};
            bins ODI_BYTE1 = {'h71};
            bins ODI_BYTE2 = {'h72};
            bins ODI_BYTE3 = {'h73};
            bins ODI_HALFWORD0 = {'h74};
            bins ODI_HALFWORD1 = {'h76};
            bins ODI_WMRBYTE0 = {'h78};
            bins ODI_WMRBYTE1 = {'h79};
            bins ODI_WMRBYTE2 = {'h7a};
            bins ODI_WMRBYTE3 = {'h7b};
            bins ODI_WMRHALFWORD0 = {'h7c};
            bins ODI_WMRHALFWORD1 = {'h7e};
            bins ODI_WORD0 = {'h80};
            bins ODI_WORD1 = {'h84};
            bins ODI_PS_ACCESS_ENA = {'h88};
            bins ODI_PS_ACCESS_ENA_TEST = {'h89};
         }

         RW: coverpoint is_read {
            bins RD = {1};
            bins WR = {0};
         }

         ACCESS: cross ADDR, RW;

      endgroup: ra_cov

      function new(string name = "ODI_module_ODI_map_coverage");
         ra_cov = new(name);
      endfunction: new

      function void sample(uvm_reg_addr_t offset, bit is_read);
         ra_cov.sample(offset, is_read);
      endfunction: sample

   endclass: ODI_module_ODI_map_coverage



   //--------------------------------------------------------------------
   // Class: ODI_module
   // 
   // Block  registers
   //--------------------------------------------------------------------

   class ODI_module extends uvm_reg_block;
      `uvm_object_utils(ODI_module)

      rand ODI_OLEDBYTE3_0_reg ODI_OLEDBYTE3_0; 
      rand ODI_OLEDBYTE7_4_reg ODI_OLEDBYTE7_4; 
      rand ODI_OLEDBYTE11_8_reg ODI_OLEDBYTE11_8; 
      rand ODI_OLEDBYTE15_12_reg ODI_OLEDBYTE15_12; 
      rand ODI_BYTE0_reg ODI_BYTE0; 
      rand ODI_BYTE1_reg ODI_BYTE1; 
      rand ODI_BYTE2_reg ODI_BYTE2; 
      rand ODI_BYTE3_reg ODI_BYTE3; 
      rand ODI_HALFWORD0_reg ODI_HALFWORD0; 
      rand ODI_HALFWORD1_reg ODI_HALFWORD1; 
      rand ODI_WMRBYTE0_reg ODI_WMRBYTE0; 
      rand ODI_WMRBYTE1_reg ODI_WMRBYTE1; 
      rand ODI_WMRBYTE2_reg ODI_WMRBYTE2; 
      rand ODI_WMRBYTE3_reg ODI_WMRBYTE3; 
      rand ODI_WMRHALFWORD0_reg ODI_WMRHALFWORD0; 
      rand ODI_WMRHALFWORD1_reg ODI_WMRHALFWORD1; 
      rand ODI_WORD0_reg ODI_WORD0; 
      rand ODI_WORD1_reg ODI_WORD1; 
      rand ODI_PS_ACCESS_ENA_reg ODI_PS_ACCESS_ENA; 
      rand ODI_PS_ACCESS_ENA_TEST_reg ODI_PS_ACCESS_ENA_TEST; 

      uvm_reg_map ODI_map; 
      ODI_module_ODI_map_coverage ODI_map_cg;


      // Function: new
      // 
      function new(string name = "ODI_module");
         super.new(name, build_coverage(UVM_CVR_ALL));
      endfunction


      // Function: build
      // 
      virtual function void build();

         if(has_coverage(UVM_CVR_ADDR_MAP)) begin
            ODI_map_cg = ODI_module_ODI_map_coverage::type_id::create("ODI_map_cg");
            ODI_map_cg.ra_cov.set_inst_name(this.get_full_name());
            void'(set_coverage(UVM_CVR_ADDR_MAP));
         end
         ODI_OLEDBYTE3_0 = ODI_OLEDBYTE3_0_reg::type_id::create("ODI_OLEDBYTE3_0");
         ODI_OLEDBYTE3_0.configure(this);
         ODI_OLEDBYTE3_0.build();

         ODI_OLEDBYTE7_4 = ODI_OLEDBYTE7_4_reg::type_id::create("ODI_OLEDBYTE7_4");
         ODI_OLEDBYTE7_4.configure(this);
         ODI_OLEDBYTE7_4.build();

         ODI_OLEDBYTE11_8 = ODI_OLEDBYTE11_8_reg::type_id::create("ODI_OLEDBYTE11_8");
         ODI_OLEDBYTE11_8.configure(this);
         ODI_OLEDBYTE11_8.build();

         ODI_OLEDBYTE15_12 = ODI_OLEDBYTE15_12_reg::type_id::create("ODI_OLEDBYTE15_12");
         ODI_OLEDBYTE15_12.configure(this);
         ODI_OLEDBYTE15_12.build();

         ODI_BYTE0 = ODI_BYTE0_reg::type_id::create("ODI_BYTE0");
         ODI_BYTE0.configure(this);
         ODI_BYTE0.build();

         ODI_BYTE1 = ODI_BYTE1_reg::type_id::create("ODI_BYTE1");
         ODI_BYTE1.configure(this);
         ODI_BYTE1.build();

         ODI_BYTE2 = ODI_BYTE2_reg::type_id::create("ODI_BYTE2");
         ODI_BYTE2.configure(this);
         ODI_BYTE2.build();

         ODI_BYTE3 = ODI_BYTE3_reg::type_id::create("ODI_BYTE3");
         ODI_BYTE3.configure(this);
         ODI_BYTE3.build();

         ODI_HALFWORD0 = ODI_HALFWORD0_reg::type_id::create("ODI_HALFWORD0");
         ODI_HALFWORD0.configure(this);
         ODI_HALFWORD0.build();

         ODI_HALFWORD1 = ODI_HALFWORD1_reg::type_id::create("ODI_HALFWORD1");
         ODI_HALFWORD1.configure(this);
         ODI_HALFWORD1.build();

         ODI_WMRBYTE0 = ODI_WMRBYTE0_reg::type_id::create("ODI_WMRBYTE0");
         ODI_WMRBYTE0.configure(this);
         ODI_WMRBYTE0.build();

         ODI_WMRBYTE1 = ODI_WMRBYTE1_reg::type_id::create("ODI_WMRBYTE1");
         ODI_WMRBYTE1.configure(this);
         ODI_WMRBYTE1.build();

         ODI_WMRBYTE2 = ODI_WMRBYTE2_reg::type_id::create("ODI_WMRBYTE2");
         ODI_WMRBYTE2.configure(this);
         ODI_WMRBYTE2.build();

         ODI_WMRBYTE3 = ODI_WMRBYTE3_reg::type_id::create("ODI_WMRBYTE3");
         ODI_WMRBYTE3.configure(this);
         ODI_WMRBYTE3.build();

         ODI_WMRHALFWORD0 = ODI_WMRHALFWORD0_reg::type_id::create("ODI_WMRHALFWORD0");
         ODI_WMRHALFWORD0.configure(this);
         ODI_WMRHALFWORD0.build();

         ODI_WMRHALFWORD1 = ODI_WMRHALFWORD1_reg::type_id::create("ODI_WMRHALFWORD1");
         ODI_WMRHALFWORD1.configure(this);
         ODI_WMRHALFWORD1.build();

         ODI_WORD0 = ODI_WORD0_reg::type_id::create("ODI_WORD0");
         ODI_WORD0.configure(this);
         ODI_WORD0.build();

         ODI_WORD1 = ODI_WORD1_reg::type_id::create("ODI_WORD1");
         ODI_WORD1.configure(this);
         ODI_WORD1.build();

         ODI_PS_ACCESS_ENA = ODI_PS_ACCESS_ENA_reg::type_id::create("ODI_PS_ACCESS_ENA");
         ODI_PS_ACCESS_ENA.configure(this);
         ODI_PS_ACCESS_ENA.build();

         ODI_PS_ACCESS_ENA_TEST = ODI_PS_ACCESS_ENA_TEST_reg::type_id::create("ODI_PS_ACCESS_ENA_TEST");
         ODI_PS_ACCESS_ENA_TEST.configure(this);
         ODI_PS_ACCESS_ENA_TEST.build();

         ODI_map = create_map("ODI_map", 'h0, 4, UVM_LITTLE_ENDIAN, 1);
         default_map = ODI_map;

         ODI_map.add_reg(ODI_OLEDBYTE3_0, 'h60, "RW");
         ODI_map.add_reg(ODI_OLEDBYTE7_4, 'h64, "RW");
         ODI_map.add_reg(ODI_OLEDBYTE11_8, 'h68, "RW");
         ODI_map.add_reg(ODI_OLEDBYTE15_12, 'h6c, "RW");
         ODI_map.add_reg(ODI_BYTE0, 'h70, "RW");
         ODI_map.add_reg(ODI_BYTE1, 'h71, "RW");
         ODI_map.add_reg(ODI_BYTE2, 'h72, "RW");
         ODI_map.add_reg(ODI_BYTE3, 'h73, "RW");
         ODI_map.add_reg(ODI_HALFWORD0, 'h74, "RW");
         ODI_map.add_reg(ODI_HALFWORD1, 'h76, "RW");
         ODI_map.add_reg(ODI_WMRBYTE0, 'h78, "RW");
         ODI_map.add_reg(ODI_WMRBYTE1, 'h79, "RW");
         ODI_map.add_reg(ODI_WMRBYTE2, 'h7a, "RW");
         ODI_map.add_reg(ODI_WMRBYTE3, 'h7b, "RW");
         ODI_map.add_reg(ODI_WMRHALFWORD0, 'h7c, "RW");
         ODI_map.add_reg(ODI_WMRHALFWORD1, 'h7e, "RW");
         ODI_map.add_reg(ODI_WORD0, 'h80, "RW");
         ODI_map.add_reg(ODI_WORD1, 'h84, "RW");
         ODI_map.add_reg(ODI_PS_ACCESS_ENA, 'h88, "RW");
         ODI_map.add_reg(ODI_PS_ACCESS_ENA_TEST, 'h89, "RW");

         lock_model();
      endfunction


      // Function: sample
      // 
      function void sample(uvm_reg_addr_t offset, bit is_read, uvm_reg_map  map);
         if(get_coverage(UVM_CVR_ADDR_MAP)) begin
            if(map.get_name() == "ODI_map") begin
               ODI_map_cg.sample(offset, is_read);
            end
         end
      endfunction: sample

   endclass



   //--------------------------------------------------------------------
   // Class: DTI_module_DTI_map_coverage
   // 
   // Coverage for the 'DTI_map' in 'DTI_module'
   //--------------------------------------------------------------------

   class DTI_module_DTI_map_coverage extends uvm_object;
      `uvm_object_utils(DTI_module_DTI_map_coverage)

      covergroup ra_cov(string name) with function sample(uvm_reg_addr_t addr, bit is_read);

         option.per_instance = 1;
         option.name = name; 

         ADDR: coverpoint addr {
            bins DTI_SPI_FIFO_TX_WRITE_ENABLE = {'h60};
            bins DTI_SPI_ACTIVE = {'h64};
            bins DTI_SPI_TX_FIFO_COUNT = {'h68};
            bins DTI_SPI_RX_FIFO_COUNT = {'h6c};
            bins DTI_SPI_LOOP_ENA = {'h70};
            bins DTI_SPI_PS_ACCESS_ENA = {'h74};
         }

         RW: coverpoint is_read {
            bins RD = {1};
            bins WR = {0};
         }

         ACCESS: cross ADDR, RW {
            ignore_bins read_only  = binsof(ADDR) intersect {'h64, 'h68, 'h6c} && binsof(RW) intersect {0};
         }

      endgroup: ra_cov

      function new(string name = "DTI_module_DTI_map_coverage");
         ra_cov = new(name);
      endfunction: new

      function void sample(uvm_reg_addr_t offset, bit is_read);
         ra_cov.sample(offset, is_read);
      endfunction: sample

   endclass: DTI_module_DTI_map_coverage



   //--------------------------------------------------------------------
   // Class: DTI_module
   // 
   // Block  registers
   //--------------------------------------------------------------------

   class DTI_module extends uvm_reg_block;
      `uvm_object_utils(DTI_module)

      rand DTI_SPI_FIFO_TX_WRITE_ENABLE_reg DTI_SPI_FIFO_TX_WRITE_ENABLE; 
      rand DTI_SPI_ACTIVE_reg DTI_SPI_ACTIVE; 
      rand DTI_SPI_TX_FIFO_COUNT_reg DTI_SPI_TX_FIFO_COUNT; 
      rand DTI_SPI_RX_FIFO_COUNT_reg DTI_SPI_RX_FIFO_COUNT; 
      rand DTI_SPI_LOOP_ENA_reg DTI_SPI_LOOP_ENA; 
      rand DTI_SPI_PS_ACCESS_ENA_reg DTI_SPI_PS_ACCESS_ENA; 

      uvm_reg_map DTI_map; 
      DTI_module_DTI_map_coverage DTI_map_cg;


      // Function: new
      // 
      function new(string name = "DTI_module");
         super.new(name, build_coverage(UVM_CVR_ALL));
      endfunction


      // Function: build
      // 
      virtual function void build();

         if(has_coverage(UVM_CVR_ADDR_MAP)) begin
            DTI_map_cg = DTI_module_DTI_map_coverage::type_id::create("DTI_map_cg");
            DTI_map_cg.ra_cov.set_inst_name(this.get_full_name());
            void'(set_coverage(UVM_CVR_ADDR_MAP));
         end
         DTI_SPI_FIFO_TX_WRITE_ENABLE = DTI_SPI_FIFO_TX_WRITE_ENABLE_reg::type_id::create("DTI_SPI_FIFO_TX_WRITE_ENABLE");
         DTI_SPI_FIFO_TX_WRITE_ENABLE.configure(this);
         DTI_SPI_FIFO_TX_WRITE_ENABLE.build();

         DTI_SPI_ACTIVE = DTI_SPI_ACTIVE_reg::type_id::create("DTI_SPI_ACTIVE");
         DTI_SPI_ACTIVE.configure(this);
         DTI_SPI_ACTIVE.build();

         DTI_SPI_TX_FIFO_COUNT = DTI_SPI_TX_FIFO_COUNT_reg::type_id::create("DTI_SPI_TX_FIFO_COUNT");
         DTI_SPI_TX_FIFO_COUNT.configure(this);
         DTI_SPI_TX_FIFO_COUNT.build();

         DTI_SPI_RX_FIFO_COUNT = DTI_SPI_RX_FIFO_COUNT_reg::type_id::create("DTI_SPI_RX_FIFO_COUNT");
         DTI_SPI_RX_FIFO_COUNT.configure(this);
         DTI_SPI_RX_FIFO_COUNT.build();

         DTI_SPI_LOOP_ENA = DTI_SPI_LOOP_ENA_reg::type_id::create("DTI_SPI_LOOP_ENA");
         DTI_SPI_LOOP_ENA.configure(this);
         DTI_SPI_LOOP_ENA.build();

         DTI_SPI_PS_ACCESS_ENA = DTI_SPI_PS_ACCESS_ENA_reg::type_id::create("DTI_SPI_PS_ACCESS_ENA");
         DTI_SPI_PS_ACCESS_ENA.configure(this);
         DTI_SPI_PS_ACCESS_ENA.build();

         DTI_map = create_map("DTI_map", 'h0, 2, UVM_LITTLE_ENDIAN, 1);
         default_map = DTI_map;

         DTI_map.add_reg(DTI_SPI_FIFO_TX_WRITE_ENABLE, 'h60, "RW");
         DTI_map.add_reg(DTI_SPI_ACTIVE, 'h64, "RO");
         DTI_map.add_reg(DTI_SPI_TX_FIFO_COUNT, 'h68, "RO");
         DTI_map.add_reg(DTI_SPI_RX_FIFO_COUNT, 'h6c, "RO");
         DTI_map.add_reg(DTI_SPI_LOOP_ENA, 'h70, "RW");
         DTI_map.add_reg(DTI_SPI_PS_ACCESS_ENA, 'h74, "RW");

         lock_model();
      endfunction


      // Function: sample
      // 
      function void sample(uvm_reg_addr_t offset, bit is_read, uvm_reg_map  map);
         if(get_coverage(UVM_CVR_ADDR_MAP)) begin
            if(map.get_name() == "DTI_map") begin
               DTI_map_cg.sample(offset, is_read);
            end
         end
      endfunction: sample

   endclass



   //--------------------------------------------------------------------
   // Class: ZU_module_ZU_map_coverage
   // 
   // Coverage for the 'ZU_map' in 'ZU_module'
   //--------------------------------------------------------------------

   class ZU_module_ZU_map_coverage extends uvm_object;
      `uvm_object_utils(ZU_module_ZU_map_coverage)

      covergroup ra_cov(string name) with function sample(uvm_reg_addr_t addr, bit is_read);

         option.per_instance = 1;
         option.name = name; 

         ADDR: coverpoint addr {
            bins ZU_DECRYPTION_BYPASS = {'h0};
            bins ZU_START_DECRYPTION = {'h4};
            bins ZU_DONE_DECRYPTION = {'h8};
            bins ZU_FSM_RST = {'hc};
         }

         RW: coverpoint is_read {
            bins RD = {1};
            bins WR = {0};
         }

         ACCESS: cross ADDR, RW {
            ignore_bins read_only  = binsof(ADDR) intersect {'h8} && binsof(RW) intersect {0};
         }

      endgroup: ra_cov

      function new(string name = "ZU_module_ZU_map_coverage");
         ra_cov = new(name);
      endfunction: new

      function void sample(uvm_reg_addr_t offset, bit is_read);
         ra_cov.sample(offset, is_read);
      endfunction: sample

   endclass: ZU_module_ZU_map_coverage



   //--------------------------------------------------------------------
   // Class: ZU_module
   // 
   // Block  registers
   //--------------------------------------------------------------------

   class ZU_module extends uvm_reg_block;
      `uvm_object_utils(ZU_module)

      rand ZU_DECRYPTION_BYPASS_reg ZU_DECRYPTION_BYPASS; // Data  packet  NOT  decrypted;  just  passed  through
      rand ZU_START_DECRYPTION_reg ZU_START_DECRYPTION; // Start  decryption
      rand ZU_DONE_DECRYPTION_reg ZU_DONE_DECRYPTION; 
      rand ZU_FSM_RST_reg ZU_FSM_RST; // Reset  ZU  FSM  that  controls  decryption  HLS  IP.

      uvm_reg_map ZU_map; 
      ZU_module_ZU_map_coverage ZU_map_cg;


      // Function: new
      // 
      function new(string name = "ZU_module");
         super.new(name, build_coverage(UVM_CVR_ALL));
      endfunction


      // Function: build
      // 
      virtual function void build();

         if(has_coverage(UVM_CVR_ADDR_MAP)) begin
            ZU_map_cg = ZU_module_ZU_map_coverage::type_id::create("ZU_map_cg");
            ZU_map_cg.ra_cov.set_inst_name(this.get_full_name());
            void'(set_coverage(UVM_CVR_ADDR_MAP));
         end
         ZU_DECRYPTION_BYPASS = ZU_DECRYPTION_BYPASS_reg::type_id::create("ZU_DECRYPTION_BYPASS");
         ZU_DECRYPTION_BYPASS.configure(this);
         ZU_DECRYPTION_BYPASS.build();

         ZU_START_DECRYPTION = ZU_START_DECRYPTION_reg::type_id::create("ZU_START_DECRYPTION");
         ZU_START_DECRYPTION.configure(this);
         ZU_START_DECRYPTION.build();

         ZU_DONE_DECRYPTION = ZU_DONE_DECRYPTION_reg::type_id::create("ZU_DONE_DECRYPTION");
         ZU_DONE_DECRYPTION.configure(this);
         ZU_DONE_DECRYPTION.build();

         ZU_FSM_RST = ZU_FSM_RST_reg::type_id::create("ZU_FSM_RST");
         ZU_FSM_RST.configure(this);
         ZU_FSM_RST.build();

         ZU_map = create_map("ZU_map", 'h0, 1, UVM_LITTLE_ENDIAN, 1);
         default_map = ZU_map;

         ZU_map.add_reg(ZU_DECRYPTION_BYPASS, 'h0, "RW");
         ZU_map.add_reg(ZU_START_DECRYPTION, 'h4, "RW");
         ZU_map.add_reg(ZU_DONE_DECRYPTION, 'h8, "RO");
         ZU_map.add_reg(ZU_FSM_RST, 'hc, "RW");

         lock_model();
      endfunction


      // Function: sample
      // 
      function void sample(uvm_reg_addr_t offset, bit is_read, uvm_reg_map  map);
         if(get_coverage(UVM_CVR_ADDR_MAP)) begin
            if(map.get_name() == "ZU_map") begin
               ZU_map_cg.sample(offset, is_read);
            end
         end
      endfunction: sample

   endclass



   //--------------------------------------------------------------------
   // Class: SCU_module_SCU_map_coverage
   // 
   // Coverage for the 'SCU_map' in 'SCU_module'
   //--------------------------------------------------------------------

   class SCU_module_SCU_map_coverage extends uvm_object;
      `uvm_object_utils(SCU_module_SCU_map_coverage)

      covergroup ra_cov(string name) with function sample(uvm_reg_addr_t addr, bit is_read);

         option.per_instance = 1;
         option.name = name; 

         ADDR: coverpoint addr {
            bins SCU_ZU_DATA_ENA = {'h0};
            bins SCU_DTI_READ_ENA = {'h4};
            bins SCU_FSM_RST = {'h8};
            bins SCU_ALARM_ACK_BUTTON = {'hc};
            bins SCU_OLEDBYTE3_0 = {'h10};
            bins SCU_OLEDBYTE7_4 = {'h14};
            bins SCU_OLEDBYTE11_8 = {'h18};
            bins SCU_OLEDBYTE15_12 = {'h1c};
         }

         RW: coverpoint is_read {
            bins RD = {1};
            bins WR = {0};
         }

         ACCESS: cross ADDR, RW {
            ignore_bins read_only  = binsof(ADDR) intersect {'hc} && binsof(RW) intersect {0};
         }

      endgroup: ra_cov

      function new(string name = "SCU_module_SCU_map_coverage");
         ra_cov = new(name);
      endfunction: new

      function void sample(uvm_reg_addr_t offset, bit is_read);
         ra_cov.sample(offset, is_read);
      endfunction: sample

   endclass: SCU_module_SCU_map_coverage



   //--------------------------------------------------------------------
   // Class: SCU_module
   // 
   // Block  registers
   //--------------------------------------------------------------------

   class SCU_module extends uvm_reg_block;
      `uvm_object_utils(SCU_module)

      rand SCU_ZU_DATA_ENA_reg SCU_ZU_DATA_ENA; 
      rand SCU_DTI_READ_ENA_reg SCU_DTI_READ_ENA; 
      rand SCU_FSM_RST_reg SCU_FSM_RST; 
      rand SCU_ALARM_ACK_BUTTON_reg SCU_ALARM_ACK_BUTTON; 
      rand SCU_OLEDBYTE3_0_reg SCU_OLEDBYTE3_0; 
      rand SCU_OLEDBYTE7_4_reg SCU_OLEDBYTE7_4; 
      rand SCU_OLEDBYTE11_8_reg SCU_OLEDBYTE11_8; 
      rand SCU_OLEDBYTE15_12_reg SCU_OLEDBYTE15_12; 

      uvm_reg_map SCU_map; 
      SCU_module_SCU_map_coverage SCU_map_cg;


      // Function: new
      // 
      function new(string name = "SCU_module");
         super.new(name, build_coverage(UVM_CVR_ALL));
      endfunction


      // Function: build
      // 
      virtual function void build();

         if(has_coverage(UVM_CVR_ADDR_MAP)) begin
            SCU_map_cg = SCU_module_SCU_map_coverage::type_id::create("SCU_map_cg");
            SCU_map_cg.ra_cov.set_inst_name(this.get_full_name());
            void'(set_coverage(UVM_CVR_ADDR_MAP));
         end
         SCU_ZU_DATA_ENA = SCU_ZU_DATA_ENA_reg::type_id::create("SCU_ZU_DATA_ENA");
         SCU_ZU_DATA_ENA.configure(this);
         SCU_ZU_DATA_ENA.build();

         SCU_DTI_READ_ENA = SCU_DTI_READ_ENA_reg::type_id::create("SCU_DTI_READ_ENA");
         SCU_DTI_READ_ENA.configure(this);
         SCU_DTI_READ_ENA.build();

         SCU_FSM_RST = SCU_FSM_RST_reg::type_id::create("SCU_FSM_RST");
         SCU_FSM_RST.configure(this);
         SCU_FSM_RST.build();

         SCU_ALARM_ACK_BUTTON = SCU_ALARM_ACK_BUTTON_reg::type_id::create("SCU_ALARM_ACK_BUTTON");
         SCU_ALARM_ACK_BUTTON.configure(this);
         SCU_ALARM_ACK_BUTTON.build();

         SCU_OLEDBYTE3_0 = SCU_OLEDBYTE3_0_reg::type_id::create("SCU_OLEDBYTE3_0");
         SCU_OLEDBYTE3_0.configure(this);
         SCU_OLEDBYTE3_0.build();

         SCU_OLEDBYTE7_4 = SCU_OLEDBYTE7_4_reg::type_id::create("SCU_OLEDBYTE7_4");
         SCU_OLEDBYTE7_4.configure(this);
         SCU_OLEDBYTE7_4.build();

         SCU_OLEDBYTE11_8 = SCU_OLEDBYTE11_8_reg::type_id::create("SCU_OLEDBYTE11_8");
         SCU_OLEDBYTE11_8.configure(this);
         SCU_OLEDBYTE11_8.build();

         SCU_OLEDBYTE15_12 = SCU_OLEDBYTE15_12_reg::type_id::create("SCU_OLEDBYTE15_12");
         SCU_OLEDBYTE15_12.configure(this);
         SCU_OLEDBYTE15_12.build();

         SCU_map = create_map("SCU_map", 'h0, 4, UVM_LITTLE_ENDIAN, 1);
         default_map = SCU_map;

         SCU_map.add_reg(SCU_ZU_DATA_ENA, 'h0, "RW");
         SCU_map.add_reg(SCU_DTI_READ_ENA, 'h4, "RW");
         SCU_map.add_reg(SCU_FSM_RST, 'h8, "RW");
         SCU_map.add_reg(SCU_ALARM_ACK_BUTTON, 'hc, "RO");
         SCU_map.add_reg(SCU_OLEDBYTE3_0, 'h10, "RW");
         SCU_map.add_reg(SCU_OLEDBYTE7_4, 'h14, "RW");
         SCU_map.add_reg(SCU_OLEDBYTE11_8, 'h18, "RW");
         SCU_map.add_reg(SCU_OLEDBYTE15_12, 'h1c, "RW");

         lock_model();
      endfunction


      // Function: sample
      // 
      function void sample(uvm_reg_addr_t offset, bit is_read, uvm_reg_map  map);
         if(get_coverage(UVM_CVR_ADDR_MAP)) begin
            if(map.get_name() == "SCU_map") begin
               SCU_map_cg.sample(offset, is_read);
            end
         end
      endfunction: sample

   endclass



   //--------------------------------------------------------------------
   // Class: top_PSIF
   // 
   // PSIF  instance
   //--------------------------------------------------------------------

   class top_PSIF extends uvm_reg_block;
      `uvm_object_utils(top_PSIF)

      rand ODI_module ODI; 
      rand DTI_module DTI; 
      rand ZU_module ZU; 
      rand SCU_module SCU; 
      DTISPITXFIFO_mem DTISPITXFIFO; 
      DTISPIRXFIFO_mem DTISPIRXFIFO; 
      ZUPACKET_mem ZUPACKET; 
      ZUKEY_mem ZUKEY; 

      uvm_reg_map top_if_map; 


      // Function: new
      // 
      function new(string name = "top_PSIF");
         super.new(name, build_coverage(UVM_CVR_ALL));
      endfunction


      // Function: build
      // 
      virtual function void build();
         ODI = ODI_module::type_id::create("ODI");
         ODI.configure(this);
         ODI.build();

         DTI = DTI_module::type_id::create("DTI");
         DTI.configure(this);
         DTI.build();

         ZU = ZU_module::type_id::create("ZU");
         ZU.configure(this);
         ZU.build();

         SCU = SCU_module::type_id::create("SCU");
         SCU.configure(this);
         SCU.build();

         DTISPITXFIFO = DTISPITXFIFO_mem::type_id::create("DTISPITXFIFO");
         DTISPITXFIFO.configure(this);

         DTISPIRXFIFO = DTISPIRXFIFO_mem::type_id::create("DTISPIRXFIFO");
         DTISPIRXFIFO.configure(this);

         ZUPACKET = ZUPACKET_mem::type_id::create("ZUPACKET");
         ZUPACKET.configure(this);

         ZUKEY = ZUKEY_mem::type_id::create("ZUKEY");
         ZUKEY.configure(this);

         top_if_map = create_map("top_if_map", 'h0, 4, UVM_LITTLE_ENDIAN, 1);
         default_map = top_if_map;

         top_if_map.add_submap(ODI.ODI_map, 'h10000);
         top_if_map.add_submap(DTI.DTI_map, 'h20000);
         top_if_map.add_submap(ZU.ZU_map, 'h30000);
         top_if_map.add_submap(SCU.SCU_map, 'h40000);
         top_if_map.add_mem(DTISPITXFIFO, 'h200000, "RW");
         top_if_map.add_mem(DTISPIRXFIFO, 'h400000, "RO");
         top_if_map.add_mem(ZUPACKET, 'h600000, "RW");
         top_if_map.add_mem(ZUKEY, 'h800000, "RW");

         lock_model();
      endfunction
   endclass


endpackage
