#!/usr/bin/tclsh

#Path to repo
set repo_path $::env(MLA_DESIGN)
set local_script_path "scripts/questa"
set scripts_path $repo_path/$local_script_path
set log_path $scripts_path/log

#Path to wizGen repo
#set repo_path_wizgen $::env(WIZGEN_1_3_REPOSITORY)

set logfilename $log_path/comp_wizgen_if_log.txt
set fileid [open $logfilename "w"]

puts "\r\n------- comp_wizgen_if.tcl -------"
puts $fileid "\r\n------- comp_wizgen_if.tcl -------"

set work_lib $lib_path/mla_lib

set vcom "vcom -2008 -nologo -linedebug +acc=nprv -fsmdebug +cover"

# Set to MLA design (clone) directory for executing wizGen for each interface
cd $repo_path
set home_path $::env(HOME)

# NB: Uses wizGen 1.3 

# Generate wizGen register and testbench files for PSIF interface
#set result [eval exec -ignorestderr python $repo_path_wizgen/main.py -g psif]
#puts $result
#puts $fileid $result

# Execute Questa vreguvm for generating UVM register class based on CSV files generated by wizGen for PSIF interface
cd $repo_path/if/psif/tb/csvFiles
set result [eval exec vreguvm  -uvmout top_psif_vreguvm_pkg_uvm.sv -csvin top_psif_regs.csv -csvin top_psif_blocks.csv -csvin top_psif_maps.csv -csvin top_psif_mems.csv -block top_PSIF]
puts $result
puts $fileid $result
set result [eval exec vreguvm  -uvmout top_psif_vreguvm_pkg_uvm_rw.sv -csvin top_psif_regs_rw.csv -csvin top_psif_blocks_rw.csv -csvin top_psif_maps_rw.csv -csvin top_psif_mems_rw.csv -block top_PSIF_rw]
puts $result
puts $fileid $result

close $fileid
